#!/usr/bin/env python2.6
import os.path, sys, pwd, grp, subprocess
from optparse import OptionParser
from pfscripts import *

def main():
  parser = OptionParser()
  parser.usage = "%prog [options] sourcePath"
  parser.description = "%prog --  list file(s) based on sourcePath in parallel"
  parser.add_option("-R", dest="recurse", default=False, action="store_true", help="list directories recursively")
  parser.add_option("-v", dest="verbose", default=False, action="store_true", help="verbose result output")
  (options, args) = parser.parse_args()

  config = parse_config()


  jid = get_jid()
  src = args
  commands = Commands()
  commands.add("-w", Work.LS)
  commands.add("-j", jid)

  base_name = os.path.dirname(src[0])
  if options.recurse:
    commands.add("-r")

  commands.add("-p", *src)

  host_list = filter(lambda x: config["active_nodes"][x] == "ON", config["active_nodes"])
  num_procs = config["num_procs"]["pfcp"]

  if len(host_list) == 0:
    busy()
    sys.exit(2)
  
  pftool = ROOT_PATH("pftool")
  mpigo = "/usr/local/gpfstools/openmpi/bin/mpirun"

  pfcmd = Commands()
  pfcmd.add(mpigo)
  pfcmd.add("-host", ",".join(host_list))
  pfcmd.add("-n", num_procs)
  pfcmd.add(pftool)
  pfcmd.add(*commands.commands)

  host = gethostname()
  print "Launched %s from host %s at: %s"%(sys.argv[0], host, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime()))
  
  #write_log("[pfcp] [%s] Begin Date: %s"%(jid, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime())))
  #write_log("[pfcp] [%s] CMD %s"%(jid, " ".join(pfcpcmd)))


  status = subprocess.call(pfcmd.commands)
  if(status != 0):
    print "ERROR: %s failed"%sys.argv[0]
    #write_log("[pfcp] [%s] PFCP failed."%(jid), LOG_ERR)

  
  print "Job finished at: %s"%(time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime()))
  #write_log("[pfcp] [%s] Job End at: %s"%(jid, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime())))


if __name__ == "__main__":
  main()
