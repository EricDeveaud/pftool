#!/usr/bin/env python
import getpass, os, os.path,  datetime,time, sys, getopt, pwd, grp, subprocess
from socket import gethostname
from syslog import *

ROOT = os.path.abspath(os.path.dirname(__file__))
ROOT_PATH = lambda *args: os.path.join(ROOT, *args)


def write_log(message, priority = LOG_INFO):
  openlog("PFTOOL-LOG", 0, LOG_USER)
  syslog(priority, message)
  closelog()

def get_jid():
  user = getpass.getuser()
  c = time.gmtime()
  
  time_id = "%d%d%d%d%d%d"%(c.tm_sec, c.tm_min, c.tm_hour, c.tm_mday, 
      c.tm_mon, c.tm_year)

  hostname = gethostname()
  jid = user+time_id+hostname
  return jid


def usage():
  print """
************************************************* pfcp USAGE ***********************************************************
pfcp: copy files in parallel using pftool (parallel file tool) 

NAME
     pfcp -- copy file(s) from sourcePath to destinationPath in parallel  

SYNOPSIS
     pfcp [-b biggerBytes] [-f outputFile] [-g groupID] [-h] [-n] 
          [-o olderDays] [-R] [-s smallerBytes] [-u userID] [-v] [-y youngerDays] sourcePath destinationPath

     sourcePath         : source file path, subdirectory, or file(s). Wildcards are allowed, but must resolve to < 2,700 files. 
     destinationPath    : destination file or subdirectory. Wildcards not allowed.
     -b biggerBytes     : only copy files with a size of <biggerBytes> bytes or larger  
     -f outputFile      : redirect program output to file <outputFile> 
     -g groupID|groupName   : only compare files having group ID <groupID> or group name <groupName>
     -h                 : print command usage informaton
     -n                 : only copy files that have a different date or file size than the same files at the destination or 
                          not in the destination
     -o olderDays       : only copy files older than <olderDays> days
     -R                 : copy directories recursively  
     -s smallerBytes    : only copy files with a size of <smallerBytes> bytes or smaller
     -u userID|userName     : only compare files owned by <userID> or <userName>
     -v                 : verbose result output
     -y youngerDays     : only copy files younger than <youngerDays> days
     
     Wildcard examples: *, *.yyy, *xxx*, *.*  

     Examples:
        pfcp  fileA  fileB
        pfcp  -v fileA* subdir  
        pfcp  -n -f /users/testuser/pfcp_out.txt subdirA subdirB  
        pfcp  -R subdirA subdirB    

****************************************************** pfcp USAGE **************************************************************
"""

def main():
  try:
    opts, args = getopt.getopt(sys.argv[1:], "hR")
  except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)
  

  commands = []

  arg_vals = {}
  for o, a in opts:
    arg_vals[o] = a

  if "-h" in arg_vals:
      usage()
      sys.exit(2)
  elif "-R" in arg_vals:
    commands.append("-r");


  if len(args) < 2:
    print "ERROR: Specify the source and destination file/dir information."
    usage()
    sys.exit(2)

  src = args[:-1]
  dest = args[-1]

  base_name = os.path.dirname(src[0])
  if "-r" in commands:
    for i in src:
      if os.path.dirname(i) != base_name:
        print "ERROR: All sources for a recursive copy must be contained within the same directory."
        usage()
        sys.exit(2)

  base_dest_name = os.path.dirname(dest)
  if base_dest_name and not os.path.exists(base_dest_name):
    print "ERROR: %s - No such file or directory"%(dest)  
    usage()
    sys.exit(2)
  
  for i in src:
    if not os.path.exists(i):
      print "ERROR: cannot stat '%s': No such file or directory"%(i)
      usage()
      sys.exit(2)



  jid = get_jid()

  #0 = cp work
  commands.append("-w")
  commands.append("0")

  commands.append("-j")
  commands.append(jid)
  commands.append("-c")
  commands.append(dest)
  commands.append("-p")
  for item in src:
    commands.append(item)

  #temp
  host_list = ["gpfst10"]
  pfcp_num_proc = 16

  if len(host_list) == 0:
    print"""
*******************************************************************
*                                                                 *
* The Parallel Archive System is busy now. There is no available  *
* host machine to run your pfcm job now.  Please try it later.    *
*                                                                 *
* Contact:  ICN Consulting Office (5-4444 option 3)               *
*******************************************************************
"""
    sys.exit(0)

  pftool = ROOT_PATH("pftool")#"/usr/local/gpfstools/bin/pftool"
  mpigo = "/usr/local/gpfstools/openmpi/bin/mpirun"
  
  pfcpcmd = mpigo.split()
  pfcpcmd += ["-host", ",".join(host_list), "-n", str(pfcp_num_proc), pftool]
  pfcpcmd += commands


  host = gethostname()

  print "Launched pfcp from host %s at: %s"%(host, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime()))
  
  #write_log("[pfcp] [%s] Begin Date: %s"%(jid, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime())))
  #write_log("[pfcp] [%s] CMD %s"%(jid, " ".join(pfcpcmd)))


  status = subprocess.call(pfcpcmd)
  if(status != 0):
    print "ERROR: pfcp failed"
    #write_log("[pfcp] [%s] PFCP failed."%(jid), LOG_ERR)

  
  print "Job finished at: %s"%(time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime()))
  #write_log("[pfcp] [%s] Job End at: %s"%(jid, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime())))

if __name__ == "__main__":
  main()
