#!/usr/bin/env python2.6
import os.path, sys, pwd, grp, subprocess
from optparse import OptionParser
from pfscripts import *

def main():
  parser = OptionParser()
  parser.usage = "%prog [options] sourcePath destinationPath"
  parser.description = "%prog -- copy file(s) from sourcePath to destinationPath in parallel"
  parser.add_option("-R", dest="recurse", default=False, action="store_true", help="copy directories recursively")
  parser.add_option("-v", dest="verbose", default=False, action="store_true", help="verbose result output")
  parser.add_option("-n", dest="different", default=False, action="store_true", help="only copy files that have a different date or file size than the same files at the destination or not in the destination")
  (options, args) = parser.parse_args()

  config = parse_config()

  if len(args) < 2:
    parser.error("Specify the source and destination file/dir information.")

  jid = get_jid()
  src = args[:-1]
  dest = args[-1]
  commands = Commands()
  commands.add("-w", Work.COPY)
  commands.add("-j", jid)

  base_name = os.path.dirname(src[0])
  if options.recurse:
    commands.add("-r")
    for i in src:
      if os.path.dirname(i) != base_name:
        parser.error("All sources for a recursive copy must be contained within the same directory.")

  base_dest_name = os.path.dirname(dest)
  if base_dest_name and not os.path.exists(base_dest_name):
   parser.error("%s - No such file or directory"%(dest)) 
  
  for i in src:
    if not os.path.exists(i):
      parser.error("cannot stat '%s': No such file or directory"%(i))

  #parse additional options
  if options.different:
    commands.add("-n")
  
  commands.add("-p", *src)
  commands.add("-c", dest)

  host_list = filter(lambda x: config["active_nodes"][x] == "ON", config["active_nodes"])
  num_procs = config["num_procs"]["pfcp"]

  if len(host_list) == 0:
    busy()
    sys.exit(2)
  
  pftool = ROOT_PATH("pftool")
  mpigo = "/usr/local/gpfstools/openmpi/bin/mpirun"

  pfcmd = Commands()
  pfcmd.add(mpigo)
  pfcmd.add("-host", ",".join(host_list))
  pfcmd.add("-n", num_procs)
  pfcmd.add(pftool)
  pfcmd.add(*commands.commands)

  host = gethostname()
  print "Launched %s from host %s at: %s"%(sys.argv[0], host, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime()))
  
  #write_log("[pfcp] [%s] Begin Date: %s"%(jid, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime())))
  #write_log("[pfcp] [%s] CMD %s"%(jid, " ".join(pfcpcmd)))


  status = subprocess.call(pfcmd.commands)
  if(status != 0):
    print "ERROR: %s failed"%sys.argv[0]
    #write_log("[pfcp] [%s] PFCP failed."%(jid), LOG_ERR)

  
  print "Job finished at: %s"%(time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime()))
  #write_log("[pfcp] [%s] Job End at: %s"%(jid, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime())))


if __name__ == "__main__":
  main()
