#!/usr/bin/env python
import os.path, sys, pwd, grp, subprocess
from optparse import OptionParser
from pfscripts import *

def main():
  parser = OptionParser()
  parser.usage = "%prog [options] sourcePath destinationPath"
  parser.description = "%prog -- copy file(s) from sourcePath to destinationPath in parallel"
  parser.add_option("-R", dest="recurse", default=False, action="store_true", help="copy directories recursively")
  parser.add_option("-v", dest="verbose", default=False, action="store_true", help="verbose result output")
  parser.add_option("-n", dest="different", default=False, action="store_true", help="only copy files that have a different date or file size than the same files at the destination or not in the destination")
  parser.add_option("-t", dest="threaded", default=False, action="store_true", help="run threaded mode vs mpi mode")
  (options, args) = parser.parse_args()

  config = parse_config()

  if len(args) < 2:
    parser.error("Specify the source and destination file/dir information.")

  jid = get_jid()
  src = args[:-1]
  dest = args[-1]
  commands = Commands()
  commands.add("-w", Work.COPY)
  commands.add("-j", jid)

  logging = False
  try:
    l = config.get("environment", "logging")
  except:
    parser.error("please specify whether logging should be enabled (e.g. logging: True)")

  if l.lower() == "true":
    logging = True
    commands.add("-l")
  

  if options.verbose:
    commands.add("-v")

  base_name = os.path.dirname(src[0])
  if options.recurse:
    commands.add("-r")
    for i in src:
      if os.path.dirname(i) != base_name:
        parser.error("All sources for a recursive copy must be contained within the same directory.")

  base_dest_name = os.path.dirname(dest)
  if base_dest_name and not os.path.exists(base_dest_name):
   parser.error("%s - No such file or directory"%(dest)) 
  
  #for i in src:
  #  if not os.path.exists(i):
  #    parser.error("cannot stat '%s': No such file or directory"%(i))

  try:
    chunk_at = config.get("options", "chunk_at")
    chunksize = config.get("options", "chunksize")
    commands.add("-C", chunk_at)
    commands.add("-S", chunksize)
  except:
    pass

  try: 
    archive_path = config.get("environment", "archive_path")
    fuse_path = config.get("fuse_chunker", "fuse_path")
    fuse_chunkdirs = config.get("fuse_chunker", "fuse_chunkdirs")
    fuse_chunk_at = config.get("fuse_chunker", "fuse_chunk_at")
    fuse_chunksize = config.get("fuse_chunker", "fuse_chunksize")
  
    commands.add("-a", archive_path)
    commands.add("-f", fuse_path)
    commands.add("-d", fuse_chunkdirs)
    commands.add("-W", fuse_chunk_at)
    commands.add("-A", fuse_chunksize)
  except:
    pass

  try:
    plfs_chunksize = config.get("plfs", "plfs_chunksize")
    commands.add("-z", plfs_chunksize)
  except:
    pass


  #parse additional options
  if options.different:
    commands.add("-n")

  try:
    t = config.get("options", "parallel_dest")
    if t.lower() == "true":
        commands.add("-P")
  except:
    pass

  commands.add("-c", dest)
  commands.add("-p", *src)

  threaded = False
  try:
    t = config.get("environment", "threaded")
  except:
    parser.error("please specify whether the program is threaded or not in the environment section of the config file (e.g. threaded: True)")

  if t.lower() == "true":
    threaded = True


  pfcmd = Commands()
  num_procs = config.get("num_procs", "pfcp")

  if threaded:
    pfcmd.add(pftool)
    pfcmd.add("-nthread", num_procs)
  else:
    try:
      mpigo = config.get("environment", "mpirun")
    except:
      parser.error("please specify the mpirun path in the environment section of the config file (e.g. mpirun: /path/to/mpirun)")

    try:
      host_list = map(lambda x: x[0].lower(), filter(lambda x: x[1] == "ON", config.items("active_nodes")))
    except:
      parser.error("please specify at least 1 host in active_nodes section of the config file (e.g. localhost: ON)")

    pfcmd.add(mpigo)
    if "all" not in host_list:
        pfcmd.add("-host", ",".join(host_list))
    pfcmd.add("-n", num_procs)
    pfcmd.add(pftool)
    
  pfcmd.add(*commands.commands)

  host = gethostname()
  print "Launched %s from host %s at: %s"%(sys.argv[0], host, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime()))
  
  if logging:
    write_log("[pfcp] [%s] Begin Date: %s"%(jid, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime())))
    write_log("[pfcp] [%s] CMD %s"%(jid, pfcmd))


  status = subprocess.call(pfcmd.commands)
  if(status != 0):
    print "ERROR: %s failed"%sys.argv[0]
    if logging:
      write_log("[pfcp] [%s] PFCP failed."%(jid), LOG_ERR)

  
  print "Job finished at: %s"%(time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime()))
  if logging:
    write_log("[pfcp] [%s] Job End at: %s"%(jid, time.strftime("%a %b %d %H:%M:%S %Z %Y", time.localtime())))


if __name__ == "__main__":
  main()
